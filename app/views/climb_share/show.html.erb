<%
@title = "#{@climb.name}"
%>

<div class="accordion" id="accordionExample">
  <% @route_sets.each_with_index do |route_set, i| %>
  <div class="card" data-route-set-id="<%= route_set.id %>">
    <div class="card-header" data-toggle="collapse" data-target="#collapse-<%= i %>">
      <h5 class="mb-0 d-flex justify-content-between">
        <div>
          <%= route_set.grade.name.titleize %>
        </div>
        <div>
          <%= attempted_routes(route_set) %>
        </div>
        <div>
          <%= success_rate(route_set) %>‚úî
        </div>
        <div>
          <%= new_wins_count_for_set(route_set) %>‚≠ê
        </div>
      </h5>
    </div>

    <div id="collapse-<%= i %>" class="collapse map-set">
      <div class="card-body">
        <%= render 'shared/map', route_sets: [route_set],
                                 routes: routes_for_route_set(route_set),
                                 previous_states: previous_states,
                                 new_wins: new_wins,
                                 floorplan_data: @place.floorplan.data,
                                 initial_route_states: @climb.route_states,
                                 show_new_win_star: true,
                                 lockable: false,
                                 editable: false %>
      </div>
    </div>
  </div>
  <% end %>
</div>

<script>
  $(() => {
    const $map = $('.map')
    const $routeSets = $('#routeSets')
    const $done = $('#done')
    const $routeStates = $('<input type="hidden" name="route_states" id="route_states" />')
    const routeSets = <%= raw @routes.to_json %>
    const previousStates = <%= raw previous_states.to_json %>
    const newWins = <%= raw new_wins.to_json %>

    const floorplanData = <%= raw @place.floorplan.data.to_json %>
    const floorplanImages = floorplanData.map(floorplan => {
      const img = new Image();
      img.src = $('img[data-floorplan-id=' + floorplan.id + ']').attr('src');
      return img;
    })
    const nonDeletedFloorplans = floorplanData.filter(item => !item.deleted);
    let currentFloorplans = {};

    const initRouteStates = () => {
      const initialRouteStates = <%= raw @climb.route_states.to_json %>
      Object.keys(routeSets).forEach(routeSetKey => {
        routeSets[routeSetKey].forEach(route => {
          const routeState = initialRouteStates.filter(initialRouteState => initialRouteState.route_id == route.id)[0]

          if(routeState)
            route.status = routeState.status
        })
      })
    }

    const addRoute = (route, routeSet) => {
      console.log(floorplanImages);
      console.log(route.floor, floorplanImages[route.floor].naturalWidth, floorplanImages[route.floor].naturalWidth)
      const $route = $(`<div class="route" data-route-id="${route.id}" style="left: ${(route.pos_x / floorplanImages[route.floor].naturalWidth) * 100}%; top: ${(route.pos_y / floorplanImages[route.floor].naturalHeight) * 100}%" data-floor="${route.floor}">${icon(route)}</div>`)
      $route.click(() => clickRoute(route))
      route.$elem = $route
      $('#map-' + routeSet).append($route)
    }

    const setRoute = (routeSet) => {
      const newRoutes = routeSets[routeSet]
      newRoutes.forEach(newRoute => addRoute(newRoute, routeSet))
    }

    const icon = route => {
      const newWin = newWins.filter(newWin => newWin.route_id == route.id)[0]
      let icon = ''

      if(newWin)
        icon = '‚≠ê'

      switch(route.status) {
        case 'flashed':
          return `${icon}‚ö°`
        case 'sent':
          return `${icon}‚úî`
        case 'failed':
          return '‚ùå'
      }

      switch(previousStates[route.id]) {
        case 'sent':
          return 'üü¢'
        case 'failed':
          return 'üü°'
        default:
          return 'üî¥'
      }
    }

    const switchFloorplan = ($elem, floorplan) => {
      $elem.find('#floorplan_name').text(floorplan.name);
      $elem.find('.floorplan').hide();
      console.log('.floorplan[data-floorplan-id=' + floorplan.id + ']')
      $elem.find('.floorplan[data-floorplan-id=' + floorplan.id + ']').show();
      $elem.find('.route').hide();
      $elem.find('.route[data-floor=' + floorplan.id + ']').show();
      currentFloorplans[$elem] = floorplan;
    }

    $('.floorplan-prev').click((e) => {
      const $elem = $(e.currentTarget).closest('.map-set');
      const floorplans = nonDeletedFloorplans;
      const next = floorplans.indexOf(currentFloorplans[$elem])-1;
      if(next < 0)
        switchFloorplan($elem, floorplans[[floorplans.length-1]]);
      else
        switchFloorplan($elem, floorplans[next]);
    });

    $('.floorplan-next').click((e) => {
      const $elem = $(e.currentTarget).closest('.map-set');
      const floorplans = nonDeletedFloorplans;
      const next = floorplans.indexOf(currentFloorplans[$elem])+1;
      if(next >= floorplans.length)
        switchFloorplan($elem, floorplans[0]);
      else
        switchFloorplan($elem, floorplans[next]);
    });

    let imagesLoaded = 0;
    const totalImages = $('.floorplan').length;
    $('.floorplan').each(function() {
      $(this).on('load', function() {
        imagesLoaded++;
        if (imagesLoaded === totalImages) {
          initRouteStates()
          Object.keys(routeSets).forEach(routeSet => setRoute(routeSet))

          $('.map-set').each((id) => {
            switchFloorplan($($('.map-set')[id]), floorplanData[0]);
          })
        }
      }).each(function() {
        if (this.complete) $(this).trigger('load');
      });
    });

    $('#share').click(() => {
      navigator.share({
        title: 'aSENDit Climb <%= @climb.name %>',
        url: '<%= climb_share_url(@climb) %>'
      })
    })
  })
</script>
