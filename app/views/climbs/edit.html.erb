<%
@title = "Climb That Shit"
@back_url = climbs_path
@extra_header = button_to "Done", @climb, method: :patch, class: "btn btn-primary btn-sm"
%>

<div class="card">
  <div class="row mx-1">
    <select id="routeSets" class="form-control">
      <% @active_route_sets.each do |route_set| %>
      <option value="<%= route_set.id %>">
        <%= route_set.name %>
      </option>
      <% end %>
    </select>
  </div>

  <div id="map" class="map">
    <img src="/GroundFloor.png" id="floorBackground" />
  </div>
</div>

<script>
  $(() => {
    const $map = $('#map')
    const $routeSets = $('#routeSets')
    const $done = $('#done')
    const $routeStates = $('<input type="hidden" name="route_states" id="route_states" />')
    const routeSets = <%= raw @routes.to_json %>
    const previousStates = <%= raw previous_states.to_json %>
    let $routes = []

    const initRouteStates = () => {
      const initialRouteStates = <%= raw @climb.route_states.to_json %>
      Object.keys(routeSets).forEach(routeSetKey => {
        routeSets[routeSetKey].forEach(route => {
          const routeState = initialRouteStates.filter(initialRouteState => initialRouteState.route_id == route.id)[0]

          if(!routeState)
            return

          route.status = routeState.status
        })
      })
    }

    const changeRoute = () => {
      $routes.forEach($route => {
        $route.remove()
      })
      $routes = []

      const newRoutes = routeSets[$routeSets.val()]
      newRoutes.forEach(addRoute)
    }

    const addRoute = route => {
      const $route = $(`<div class="route" style="left: ${(route.pos_x / 400) * 100}%; top: ${(route.pos_y / 873) * 100}%">${icon(route)}</div>`)
      $route.click(() => clickRoute(route))
      route.$elem = $route
      $map.append($route)
      $routes.push($route)
    }

    const clickRoute = route => {
      const statusOrder = ['failed', 'sent', 'flashed']
      const nextStatusIndex = statusOrder.indexOf(route.status) + 1
      route.status = statusOrder[nextStatusIndex]

      route.$elem.text(icon(route))

      updateRouteStates()
    }

    const icon = route => {
      switch(route.status) {
        case 'flashed':
          return '⚡'
        case 'sent':
          return '✔'
        case 'failed':
          return '❌'
      }

      switch(previousStates[route.id]) {
        case 'sent':
          return '🟢'
        case 'failed':
          return '🟡'
        default:
          return '🔴'
      }
    }

    const updateRouteStates = () => {
      const routeStates = Object.keys(routeSets).map(routeSetId => {
        return routeSets[routeSetId].map(route => ({
          routeId: route.id,
          status: route.status || 'not_attempted'
        }))
      }).flat()

      $routeStates.val(JSON.stringify(routeStates))
    }

    const $form = $('[action="<%= climb_path(@climb) %>"]')
    $form.append($routeStates)

    $routeSets.change(changeRoute)
    initRouteStates()
    changeRoute()
    updateRouteStates()
  })
</script>
